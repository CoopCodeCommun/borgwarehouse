services:
  borgwarehouse:
    container_name: borgwarehouse
    image: borgwarehouse/borgwarehouse
    user: "${UID:?UID variable missing}:${GID:?GID variable missing}"
    ports:
      - "${WEB_SERVER_PORT:?WEB_SERVER_PORT variable missing}:3000"
      - "${SSH_SERVER_PORT:?SSH_SERVER_PORT variable missing}:22"
    env_file:
      - .env
    volumes:
      - ${CONFIG_PATH:?CONFIG_PATH variable missing}:/home/borgwarehouse/app/config
      - ${SSH_PATH:?SSH_PATH variable missing}:/home/borgwarehouse/.ssh
      - ${SSH_HOST:?SSH_HOST variable missing}:/etc/ssh
      - ${BORG_REPOSITORY_PATH:?BORG_REPOSITORY_PATH variable missing}:/home/borgwarehouse/repos
      - ${TMP_PATH:?TMP_PATH variable missing}:/home/borgwarehouse/tmp
      - ${LOGS_PATH:?LOGS_PATH variable missing}:/home/borgwarehouse/logs
    labels:
      # requiered
      - "traefik.enable=true" 
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.borgwarehouse.tls.certresolver=myresolver"
      - "traefik.http.services.borgwarehouse.loadbalancer.server.port=3000"
      - "traefik.http.routers.borgwarehouse.rule=Host(`$FQDN`)"
    
    networks:
      - frontend
    restart: always

  syncthing:
    image: ghcr.io/linuxserver/syncthing
    volumes:
      - ./sync_config:/config
      - ${BORG_REPOSITORY_PATH:?BORG_REPOSITORY_PATH variable missing}:/home/borgwarehouse/repos
    ports:
      - 8384:8384
      - 22000:22000
      - 21027:21027/udp
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    labels:
      - traefik.enable=true
      - traefik.docker.network=frontend
      - traefik.http.routers.syncthing.tls.certresolver=myresolver
      - traefik.http.routers.syncthing.rule=Host(`$SYNC_DOMAIN`)
      - traefik.http.services.syncthing.loadbalancer.server.port=8384

    networks:
      - frontend
    restart: always



networks:
  frontend:
    external: true



  # Apprise is used to send notifications, it's optional. http://apprise:8000 is the URL to use in BorgWarehouse.
  # apprise:
  #   container_name: apprise
  #   image: caronc/apprise
  #   user: "www-data:www-data"


# install :

# mkdir config ssh ssh_host repos tmp logs
# sudo chown 1001:1001 config ssh ssh_host repos tmp logs
# Create a cron on host ( not inside docker ) : 
# * * * * * curl --request POST --url 'http://localhost:3000/api/v1/cron/status' --header 'Authorization: Bearer CRONJOB_KEY' ; curl --request POST --url 'http://localhost:3000/api/v1/cron/storage' --header 'Authorization: Bearer CRONJOB_KEY'

# Nouveau dépot :

# Aller dans le serveur et le dossier à sauvegarder
# Générer une clé ssh si ce n'est pas déja fait avec l'utilisateur qui va lancer le script de sauvegarde
# Créer un dépot sur l'UX de borgwarehouse (BWH) en ajoutant la clé publique
# clic sur la ptite icone en haut a gauche du nouvel objet backup sur BWH pour copier l'adresse ssh
# retourner sur le dossier de sauvegarde et initier le dépot en faisant : borg init -e repokey-blake2 <adresse ssh>
# générer et renseigner un mot de passe super super super fort et le stocker dans un coffre fort numérique. Garder aussi l'id du repo au cazou ( ex: c7a620ed )

# Je le fait mais je suis pas sur que ça soit utile, mais on sait jamais : backuper la PASSPHRASE au même endroit que la clé :
# - borg key export <adresse ssh> ./key && cat ./key && rm ./key

# écrire le script de backup et le lancer régulièrement. 
# Par exemple, pour Tibillet et une base postgres : https://github.com/TiBillet/Lespass/blob/PreProd/cron/saveDb.sh